% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/IndexFeatures.r
\name{IndexFeatures}
\alias{IndexFeatures}
\title{Function that indexes a GRanges object on binned genome and constraints. Needed prior SearchPairs() function. Note that bins in the same constraint region only will be paired in SearchPairs().}
\usage{
IndexFeatures(
  gRange.gnr_lst = NULL,
  constraint.gnr = NULL,
  chromSize.dtf = NULL,
  binSize.num = NULL,
  method.chr = "mean",
  variablesName.chr_vec = NULL,
  cores.num = 1,
  verbose.bln = TRUE
)
}
\arguments{
\item{gRange.gnr_lst}{<GRanges or GRangesList or list[GRanges]>: GRanges object, list of GRanges or GRangesList containing coordinates to index.}

\item{constraint.gnr}{<GRanges>: GRanges object of constraint regions. Note that bins in the same constraint region only will be paired in SearchPairs(). If NULL chromosomes in chromSize.dtf are used as constraints (Default NULL)}

\item{chromSize.dtf}{<data.frame>: A data.frame containing chromosomes names and lengths in base pairs (see example).}

\item{binSize.num}{<integer>: Bin size in bp - corresponds to HiC matrix resolution.}

\item{method.chr}{<character>: A string defining which summary method is used on metadata columns defined in variablesName.chr_vec if multiple ranges are indexed in the same bin. Use 'mean', 'median', 'sum', 'max' or 'min'. (Default 'mean'')}

\item{variablesName.chr_vec}{<character> : A character vector that specify the metadata columns of GRanges on which apply the summary method if multiple ranges are indexed in the same bin.}

\item{cores.num}{<integer> : Number of cores used. (Default 1)}

\item{verbose.bln}{<logical>: A logical value. If TRUE show the progression in console. (Default TRUE)}
}
\value{
A GRanges object.
}
\description{
Function that indexes a GRanges object on binned genome and constraints. Needed prior SearchPairs() function.
}
\details{
IndexFeatures
}
\examples{
Beaf32_Index.gnr <- IndexFeatures(
    gRange.gnr_lst = list(Beaf=Beaf32_Peaks.gnr), 
    chromSize.dtf  = data.frame(seqnames = c('2L', '2R'), seqlengths = c(23513712,25286936)),
    binSize.num    = 100000
)
}
